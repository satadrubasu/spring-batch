1.Datasource Configuration
   a) application.properties
      spring.datasource.url=
      spring.datasource.username
      spring.datasource.password
      spring.datasource.driver-class-name=
      
   

2. Datasource Pooling ( if spring finds the libraries in classpath/dependencies it loads them) 
    tomcat-jdbc is default pooling strategy
      spring-boot-starter-data-jpa -->spring-boot-starter-jdbc
        -->tomcat-jdbc  ( this lib is in classpath and spring pulls it )
        Now we can configure properties related to this
   spring.datasource.max-active=10
   spring.datasource.max-idle=8
   spring.datasource.max-wait=10000
   spring.datasource.min-evictable-idle-time-millis=1000
   spring.datasource.time-between-eviction-runs-millis=1
   
           

3. application-prod.properties
   override any needful attributes present in the base application.properties
      
      
4. Java based configuration for the datasource.
    Bean is defined via program and passed backed to the container.
    Note the prefix enables defining multiple datasources hence.
    

  @Configuration
  public class PersistenceConfiguration {
   @Bean
   @ConfigurationProperties(prefix="spring.datasource")
   public DataSource dataSource() {
     return DataSourceBuilder.create().build();
     }
    }
    
 5. Multi Datasource configuration
     If multiple beans are present , marking one of them with 
       @Primary -- chose the default as this
       
     others are segregated by the 
      @ConfigurationProperties(prefix="spring.datasource")
      @ConfigurationProperties(prefix="customdb.datasource")
     
     also update the application.properties with 
     
      customdb.datasource.url=
      customdb.datasource.username
      customdb.datasource.password
      customdb.datasource.driver-class-name=
        
        
 ===========================       
         
      